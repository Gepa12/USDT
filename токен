pragma solidity ^0.4.24;
import 'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
 
// ERC20 standard token
contract JB is StandardToken {
    адрес public admin; // admin
         string public name = "JB Token"; // Имя токена
         string public symbol = "JB"; // символ токена
         uint8 public decimals = 18; // Точность токена
         uint256 public INITIAL_SUPPLY = 8000000000000000000000000000; // всего 8 миллиардов * 10 ^ 18
         // Та же учетная запись будет заморожена, если выполнены какие-либо условия замораживания
         mapping (address => bool) public frozenAccount; // Аккаунт заблокирован на неопределенный срок
         mapping (address => uint256) public frozenTimestamp; // Аккаунт заблокирован на ограниченный период
 
         bool public exchangeFlag = true; // открываем обмен токенами
         // Этикетка, которая не соответствует условиям или сбор средств завершен, будет возвращен на исходный счет
         uint256 public minWei = 1; // Минимальная игра 1 wei 1eth = 1 * 10 ^ 18 wei
         uint256 public maxWei = 20000000000000000000000; // не более одного раза ударил 20000 eth
         uint256 public maxRaiseAmount = 20000000000000000000000; // Лимит рейза 20000 eth
         uint256 public routedAmount = 0; // поднял 0 eth
         uint256 public raiseRatio = 200000; // Коэффициент обмена 1eth = 200000 токенов
         // уведомление о событии
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
 
         // Конструктор
    constructor() public {
        totalSupply_ = INITIAL_SUPPLY;
        admin = msg.sender;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
 
         // откат вызывается переводом денег на адрес контракта или вызовом неконтрактной функции
         // Токены автоматически обмениваются на eth
    function()
    public payable {
        require(msg.value > 0);
        if (exchangeFlag) {
            if (msg.value >= minWei && msg.value <= maxWei){
                if (raisedAmount < maxRaiseAmount) {
                    uint256 valueNeed = msg.value;
                    raisedAmount = raisedAmount.add(msg.value);
                    if (raisedAmount > maxRaiseAmount) {
                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);
                        valueNeed = msg.value.sub(valueLeft);
                        msg.sender.transfer(valueLeft);
                        raisedAmount = maxRaiseAmount;
                    }
                    if (raisedAmount >= maxRaiseAmount) {
                        exchangeFlag = false;
                    }
                                         // Точность обработана * 10 ^ 18
                    uint256 _value = valueNeed.mul(raiseRatio);
 
                    require(_value <= balances[admin]);
                    balances[admin] = balances[admin].sub(_value);
                    balances[msg.sender] = balances[msg.sender].add(_value);
 
                    emit Transfer(admin, msg.sender, _value);
 
                }
            } else {
                msg.sender.transfer(msg.value);
            }
        } else {
            msg.sender.transfer(msg.value);
        }
    }
 
    /**
         * Изменить администратора
    */
    function changeAdmin(
        address _newAdmin
    )
    public
    returns (bool)  {
        require(msg.sender == admin);
        require(_newAdmin != address(0));
        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);
        balances[admin] = 0;
        admin = _newAdmin;
        return true;
    }
    /**
         * Дополнительная выдача
    */
    function generateToken(
        address _target,
        uint256 _amount
    )
    public
    returns (bool)  {
        require(msg.sender == admin);
        require(_target != address(0));
        balances[_target] = balances[_target].add(_amount);
        totalSupply_ = totalSupply_.add(_amount);
        INITIAL_SUPPLY = totalSupply_;
        return true;
    }
 
         // Выход из контракта
         // Может быть упомянуто только администратору
    function withdraw (
        uint256 _amount
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        msg.sender.transfer(_amount);
        return true;
    }
    /**
         * Заблокировать аккаунт
    */
    function freeze(
        address _target,
        bool _freeze
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        require(_target != address(0));
        frozenAccount[_target] = _freeze;
        return true;
    }
    /**
         * Заблокировать аккаунт по отметке времени
    */
    function freezeWithTimestamp(
        address _target,
        uint256 _timestamp
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        require(_target != address(0));
        frozenTimestamp[_target] = _timestamp;
        return true;
    }
 
    /**
                 * Пакетная блокировка учетных записей
        */
    function multiFreeze(
        address[] _targets,
        bool[] _freezes
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        require(_targets.length == _freezes.length);
        uint256 len = _targets.length;
        require(len > 0);
        for (uint256 i = 0; i < len; i = i.add(1)) {
            address _target = _targets[i];
            require(_target != address(0));
            bool _freeze = _freezes[i];
            frozenAccount[_target] = _freeze;
        }
        return true;
    }
    /**
                         * Пакетная блокировка учетных записей по метке времени
            */
    function multiFreezeWithTimestamp(
        address[] _targets,
        uint256[] _timestamps
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        require(_targets.length == _timestamps.length);
        uint256 len = _targets.length;
        require(len > 0);
        for (uint256 i = 0; i < len; i = i.add(1)) {
            address _target = _targets[i];
            require(_target != address(0));
            uint256 _timestamp = _timestamps[i];
            frozenTimestamp[_target] = _timestamp;
        }
        return true;
    }
    /**
         * Пакетный перевод
    */
    function multiTransfer(
        address[] _tos,
        uint256[] _values
    )
    public
    returns (bool) {
        require(!frozenAccount[msg.sender]);
        require(now > frozenTimestamp[msg.sender]);
        require(_tos.length == _values.length);
        uint256 len = _tos.length;
        require(len > 0);
        uint256 amount = 0;
        for (uint256 i = 0; i < len; i = i.add(1)) {
            amount = amount.add(_values[i]);
        }
        require(amount <= balances[msg.sender]);
        for (uint256 j = 0; j < len; j = j.add(1)) {
            address _to = _tos[j];
            require(_to != address(0));
            balances[_to] = balances[_to].add(_values[j]);
            balances[msg.sender] = balances[msg.sender].sub(_values[j]);
            emit Transfer(msg.sender, _to, _values[j]);
        }
        return true;
    }
    /**
         * Перевод с звонящего на _to
    */
    function transfer(
        address _to,
        uint256 _value
    )
    public
    returns (bool) {
        require(!frozenAccount[msg.sender]);
        require(now > frozenTimestamp[msg.sender]);
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
 
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
 
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    /*
         * Вызывающий абонент действует как агент для передачи токена из учетной записи в
         * Вызывающий должен иметь> = значение в квоте разрешений от
    */
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
    public
    returns (bool)
    {
        require(!frozenAccount[_from]);
        require(now > frozenTimestamp[msg.sender]);
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
 
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
 
        emit Transfer(_from, _to, _value);
        return true;
    }
    /**
         * Настройте лимит разрешений агента трансфер-агента
    */
    function approve(
        address _spender,
        uint256 _value
    ) public
    returns (bool) {
                 // Баланс будет проверяться при переводе денег, и требовать здесь бессмысленно
        // require(_value <= balances[msg.sender]);
 
        allowed[msg.sender][_spender] = _value;
 
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    /**
         * Увеличить лимит лицензии агента спонсора трансфер-агента
         * Незначительные функции
    */
    function increaseApproval(
        address _spender,
        uint256 _addedValue
    )
    public
    returns (bool)
    {
        // uint256 value_ = allowed[msg.sender][_spender].add(_addedValue);
        // require(value_ <= balances[msg.sender]);
        // allowed[msg.sender][_spender] = value_;
 
        // emit Approval(msg.sender, _spender, value_);
        return true;
    }
    /**
         * Уменьшить лицензионный лимит агента трансфер-агента
         * Незначительные функции
    */
    function decreaseApproval(
        address _spender,
        uint256 _subtractedValue
    )
    public
    returns (bool)
    {
        // uint256 oldValue = allowed[msg.sender][_spender];
        // if (_subtractedValue > oldValue) {
        //    allowed[msg.sender][_spender] = 0;
        // } else {
        //    uint256 newValue = oldValue.sub(_subtractedValue);
        //    require(newValue <= balances[msg.sender]);
        //   allowed[msg.sender][_spender] = newValue;
        //}
 
        // emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
 
    //********************************************************************************
         // Запрос, есть ли у учетной записи заблокированная отметка времени
    function getFrozenTimestamp(
        address _target
    )
    public view
    returns (uint256) {
        require(_target != address(0));
        return frozenTimestamp[_target];
    }
         // Запрос, заблокирован ли аккаунт
    function getFrozenAccount(
        address _target
    )
    public view
    returns (bool) {
        require(_target != address(0));
        return frozenAccount[_target];
    }
         // Запрос баланса контракта
    function getBalance()
    public view
    returns (uint256) {
        return address(this).balance;
    }
         // изменить имя
    function setName (
        string _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        name = _value;
        return true;
    }
         // модифицируем символ
    function setSymbol (
        string _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        symbol = _value;
        return true;
    }
 
         // Модифицируем поднятый флаг
    function setExchangeFlag (
        bool _flag
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        exchangeFlag = _flag;
        return true;
 
    }
         // Изменить нижний предел единовременного сбора средств
    function setMinWei (
        uint256 _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        minWei = _value;
        return true;
 
    }
         // Изменить верхний предел единовременного сбора средств
    function setMaxWei (
        uint256 _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        maxWei = _value;
        return true;
    }
         // Изменить общий лимит сбора средств
    function setMaxRaiseAmount (
        uint256 _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        maxRaiseAmount = _value;
        return true;
    }
 
         // Изменить количество поднятых
    function setRaisedAmount (
        uint256 _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        raisedAmount = _value;
        return true;
    }
 
         // Изменяем коэффициент подъема
    function setRaiseRatio (
        uint256 _value
    )
    public
    returns (bool) {
        require(msg.sender == admin);
        raiseRatio = _value;
        return true;
    }
 
         // Уничтожаем контракт
    function kill()
    public {
        require(msg.sender == admin);
        selfdestruct(admin);
    }
 
}
 
